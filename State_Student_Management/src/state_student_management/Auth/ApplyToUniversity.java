/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package state_student_management.Auth;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Network.Network;
import Business.Role.StudentRole;
import Business.Student.Student;
import Business.Student.StudentDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.BorderFactory;
import javax.swing.Timer;
/**
 *
 * @author bhaveshraja
 */
public class ApplyToUniversity extends javax.swing.JPanel {

    /**
     * Creates new form ApplyToUniversity
     */
    EcoSystem ecosystem;
    StudentDirectory studDir;
    UserAccount userAccount;
    JPanel userProcessContainer;
    ArrayList<Student> studentList = new ArrayList<>();
    DefaultTableModel sdt;
    int row, col;
    private DB4OUtil dB4OUtil; 
    
    public ApplyToUniversity(JPanel userProcessContainer, EcoSystem ecosystem) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.ecosystem = ecosystem;
        displayTime(); 
        //sdt = (DefaultTableModel) tblUniversityAdmin1.getModel();
       
        dB4OUtil = DB4OUtil.getInstance();  
        //populateAdmissionTable();
        populateNetworkComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cbNetwork = new javax.swing.JComboBox();
        btnUniversityApply = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        txtgre = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtStudentPassword = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        txtgender = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtMobile = new javax.swing.JTextField();
        txtage = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtielts = new javax.swing.JTextField();
        txttimedisplay = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        jLabel6.setText("Apply to University");

        jLabel1.setText("Name");

        jLabel15.setText("Network");

        btnUniversityApply.setBackground(new java.awt.Color(201, 3, 3));
        btnUniversityApply.setForeground(new java.awt.Color(255, 255, 255));
        btnUniversityApply.setText("Apply");
        btnUniversityApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUniversityApplyActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(250, 250, 250));
        btnBack.setForeground(new java.awt.Color(138, 138, 138));
        btnBack.setText("Back");
        btnBack.setBorder(null);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel9.setText("IELTS");

        jLabel3.setText("GRE");

        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUsernameKeyTyped(evt);
            }
        });

        jLabel4.setText("Password");

        jLabel12.setText("Username");

        txtStudentPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentPasswordActionPerformed(evt);
            }
        });
        txtStudentPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtStudentPasswordKeyTyped(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/SSM (1).png"))); // NOI18N
        jLabel5.setText("jLabel5");

        jLabel7.setText("Gender");

        txtage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtageKeyTyped(evt);
            }
        });

        jLabel14.setText("Mobile");

        jLabel8.setText("Age");

        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEmailKeyTyped(evt);
            }
        });

        jLabel2.setText("Email");

        txttimedisplay.setBorder(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtgender, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtgre, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel7)
                            .addComponent(jLabel3)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtielts, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtStudentPassword)
                                .addComponent(jLabel4)
                                .addComponent(jLabel15)
                                .addComponent(cbNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txttimedisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(215, 215, 215))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUniversityApply, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(371, 371, 371))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txttimedisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtgender, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtgre, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtielts, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStudentPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMobile, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(cbNetwork))
                .addGap(29, 29, 29)
                .addComponent(btnUniversityApply, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    public void displayTime() {
        Timer timer = new Timer(1000, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                txttimedisplay.setText(DateFormat.getDateTimeInstance().format(new Date())); //To change body of generated methods, choose Tools | Templates.
            }
        });
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.setInitialDelay(0);
        timer.start();

    }
    
    private void btnUniversityApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUniversityApplyActionPerformed
        // TODO add your handling code here:

        String studentName = txtName.getText().trim();
        String studentEmail = txtEmail.getText().trim();
        String studentGender = txtgender.getText().trim();
        int studentAge = Integer.parseInt(txtage.getText().trim());
        int studentGre = Integer.parseInt(txtgre.getText().trim());
        double studentIelts = Double.parseDouble(txtielts.getText().trim());
        String studentUsername = txtUsername.getText().trim();
        char[] passwordCharArray = txtStudentPassword.getPassword();
        String studentPassword = String.valueOf(passwordCharArray);
        long studentMobile = Long.parseLong(txtMobile.getText().trim());
        UUID uuid=UUID.randomUUID();
        Network network = (Network) cbNetwork.getSelectedItem();
        
        
        if (network == null) {
            cbNetwork.setBorder(BorderFactory.createLineBorder(Color.RED));
            cbNetwork.setForeground(Color.red);

        }
        if (txtName.getText().isEmpty()) {
            txtName.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtName.setForeground(Color.red);

        }
        if (txtage.getText().isEmpty()) {
            txtage.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtage.setForeground(Color.red);

        }
        if (txtUsername.getText().isEmpty()) {
            txtUsername.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtUsername.setForeground(Color.red);

        }
        if (txtStudentPassword.getText().isEmpty()) {
            txtStudentPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtStudentPassword.setForeground(Color.red);

        }
        if (txtEmail.getText().isEmpty()) {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtEmail.setForeground(Color.red);

        }
        if (txtgre.getText().isEmpty()) {
            txtgre.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtgre.setForeground(Color.red);

        }
        if (txtgender == null) {
            txtgender.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtgender.setForeground(Color.red);

        }
        if (txtMobile.getText().isEmpty()) {
            txtMobile.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtMobile.setForeground(Color.red);

        }
        if (txtielts.getText().isEmpty()) {
            txtielts.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtielts.setForeground(Color.red);

        }

//        if (studentName.isEmpty()|| studentEmail.isEmpty() || studentGender.isEmpty() || studentAge.isEmpty()|| studentGre.isEmpty()|| studentIelts.isEmpty()|| studentUsername.isEmpty() || studentPassword.isEmpty() || studentMobile.isEmpty())
//        {
//            JOptionPane.showMessageDialog(this, "One or More fields are empty..!", "Empty Fields", 2);
//        }
        
        else if(!validContact(txtMobile.getText())){
            JOptionPane.showMessageDialog(null, "Invalid Phone Number");
        }

        //populateAdmissionTable();

        if (validEmail(studentEmail) && validUsername(studentUsername)){

            //int age = Integer.parseInt(strAge);
            sendEmailMessage(studentEmail);
            Student student = new Student(uuid.toString(), studentEmail, studentPassword, studentUsername, studentName, studentAge, studentMobile, studentGender, studentGre, studentIelts);
            UserAccount userAccount = network.getUserAccountDirectory().createStudentAccount(studentUsername, studentPassword, student, new StudentRole());
            
            network.getStudentDirectory().addStudent(student);
            System.out.println(student.getName());
            JOptionPane.showMessageDialog(null,"Registration successfull");
            System.out.println(student.getUserName());
        }
        else {
            JOptionPane.showMessageDialog(null, "Invalid credentials");
        }

        txtName.setText("");
        txtEmail.setText("");
        txtgender.setText("");
        txtage.setText("");
        txtgre.setText("");
        txtielts.setText("");
        txtUsername.setText("");
        txtStudentPassword.setText("");
        txtMobile.setText("");
        
        

        dB4OUtil.storeSystem(ecosystem);

    }//GEN-LAST:event_btnUniversityApplyActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtStudentPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentPasswordActionPerformed

    private void txtEmailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyTyped
        // TODO add your handling code here:
        if (!validEmail(txtEmail.getText())) {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtEmail.setForeground(Color.RED);
            
        } else {
            txtEmail.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtEmail.setForeground(Color.BLACK);
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {   
                }  
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_txtEmailKeyTyped

    private void txtStudentPasswordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentPasswordKeyTyped
        // TODO add your handling code here:
        if (!validPassword(txtStudentPassword.getText())) {
            txtStudentPassword.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtStudentPassword.setForeground(Color.RED);
        } else {
            txtStudentPassword.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtStudentPassword.setForeground(Color.BLACK);
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                }  
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_txtStudentPasswordKeyTyped

    private void txtUsernameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyTyped
        // TODO add your handling code here:
        if (!validUsername(txtUsername.getText())) {
            txtUsername.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtUsername.setForeground(Color.RED);
        } else {
            txtUsername.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtUsername.setForeground(Color.BLACK);
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                }  
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_txtUsernameKeyTyped

    private void txtageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtageKeyTyped
        // TODO add your handling code here:
        if (!isNumber(txtage.getText())) {
            txtage.setBorder(BorderFactory.createLineBorder(Color.RED));
            txtage.setForeground(Color.RED);

        } else {
            txtage.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtage.setForeground(Color.BLACK);
            int delay = 3000; //milliseconds
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                }  
            };
            javax.swing.Timer tick = new javax.swing.Timer(delay, taskPerformer);
            tick.setRepeats(false);
            tick.start();
        }
    }//GEN-LAST:event_txtageKeyTyped

    public static void sendEmailMessage(String emailId) {
// Recipient's email ID needs to be mentioned.
        String to = emailId;
        String from = "rajabhavesh@gmail.com";
        String pass = "shdjpnbeulzntaup";
// Assuming you are sending email from localhost
// String host = "192.168.0.16";

// Get system properties
        Properties properties = System.getProperties();
        String host = "smtp.gmail.com";

        properties.put("mail.smtp.starttls.enable", "true");

        properties.put("mail.smtp.ssl.trust", host);
        properties.put("mail.smtp.user", from);
// properties.put("mail.smtp.password", pass);
        properties.put("mail.smtp.port", "587");
        properties.put("mail.smtp.auth", "true");

// Setup mail server
// properties.setProperty("mail.smtp.host", host);
// properties.put("mail.smtp.starttls.enable", "true");
// Get the default Session object.
        Session session = Session.getDefaultInstance(properties);

        try {
// Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

// Set From: header field of the header.
            message.setFrom(new InternetAddress(from));

// Set To: header field of the header.
            message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

// Set Subject: header field
            message.setSubject("Student Registration");
            message.setText("Thank you for registering with us. Your account will be activated within 24 hours.");
// Send message
            Transport transport = session.getTransport("smtp");
            transport.connect(host, from, pass);
            transport.sendMessage(message, message.getAllRecipients());
            transport.close();
            //System.out.println("Sent message successfully....");
        } catch (MessagingException mex) {
            mex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Invalid email id");
        }
    }
    
    public Boolean validContact(String contact) {
        String regex = "^\\(?([0-9]{3})\\)?[-.\\s]?([0-9]{3})[-.\\s]?([0-9]{4})$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(contact);
        if(matcher.matches()){
            return true;
        }
        return false;
    }
    
    public static boolean validname(String name) {
        Pattern pattern;
        Matcher matcher;
        String NAME_PATTERN = "^[A-Za-z]{1,}[\\s]{0,1}[A-Za-z]{0,}$";
        pattern = Pattern.compile(NAME_PATTERN);
        matcher = pattern.matcher(name);
        return matcher.matches();
    }
    
    public static boolean validUsername(String name) {
        Pattern pattern;
        Matcher matcher;
        String NAME_PATTERN = "^[A-Za-z\\s]+$";
        pattern = Pattern.compile(NAME_PATTERN);
        matcher = pattern.matcher(name);
        return matcher.matches();
    }
        
        
   public static boolean validEmail(String email) {
        Pattern pattern;
        Matcher matcher;
        String EMAIL_PATTERN
                = "^[\\w!#$%&’*+/=?`{|}~^-]+(?:\\.[\\w!#$%&’*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
        pattern = Pattern.compile(EMAIL_PATTERN);
        matcher = pattern.matcher(email);
        return matcher.matches();
    }

    public static boolean validPassword(String passwordValue) {
        Pattern pattern;
        Matcher matcher;
        String PASSWORD_PATTERN
                = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&+=~|?])(?=\\S+$).{8,}$";
        pattern = Pattern.compile(PASSWORD_PATTERN);
        matcher = pattern.matcher(passwordValue);
        return matcher.matches();
    }
    
    private static boolean isNumber(String n) {
		try {
			Integer.parseInt(n);
			return true;
		} catch (NumberFormatException nfe) {
			return false;
		}
    }
    
    public void populateNetworkComboBox()
     {
         cbNetwork.removeAllItems();
         
         System.out.println(ecosystem.getNetworkList());

        for (Network network : ecosystem.getNetworkList()) {
            cbNetwork.addItem(network);
        }
     }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnUniversityApply;
    private javax.swing.JComboBox cbNetwork;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtStudentPassword;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtage;
    private javax.swing.JTextField txtgender;
    private javax.swing.JTextField txtgre;
    private javax.swing.JTextField txtielts;
    private javax.swing.JTextField txttimedisplay;
    // End of variables declaration//GEN-END:variables
}
